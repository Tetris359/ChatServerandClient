import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ChatClient {
    private static final String SERVER_ADDRESS = "localhost";
    private static final int SERVER_PORT = 12345;
    private static Socket socket;
    private static PrintWriter out;
    private static Timer timer;
    private static int secondsElapsed = 0;

    public static void main(String[] args) {
        JFrame frame = new JFrame("Chat Client");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 400);

        JTextArea textArea = new JTextArea();
        textArea.setEditable(false);
        frame.add(new JScrollPane(textArea), BorderLayout.CENTER);

        JLabel timeLabel = new JLabel("Время: 00:00:00");
        frame.add(timeLabel, BorderLayout.NORTH);

        // Панель для ввода сообщения и кнопок управления секундомером
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new BorderLayout());

        JTextField textField = new JTextField();
        inputPanel.add(textField, BorderLayout.CENTER);

        // Панель для кнопок управления секундомером
        JPanel timerPanel = new JPanel();
        timerPanel.setLayout(new GridLayout(3, 1)); // Вертикальное расположение кнопок

        JButton startTimerButton = new JButton("Запустить секундомер");
        JButton stopTimerButton = new JButton("Остановить секундомер");
        JButton resetTimerButton = new JButton("Сбросить секундомер");

        timerPanel.add(startTimerButton);
        timerPanel.add(stopTimerButton);
        timerPanel.add(resetTimerButton);

        inputPanel.add(timerPanel, BorderLayout.EAST); // Размещаем панель с кнопками справа

        frame.add(inputPanel, BorderLayout.SOUTH);

        textField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                sendMessage(textField.getText());
                textField.setText("");
            }
        });

        // Добавляем MouseListener для обработки выделенного текста
        textArea.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int start = textArea.getSelectionStart();
                int end = textArea.getSelectionEnd();
                if (start != end) { // Если текст выделен
                    String selectedText = textArea.getSelectedText();
                    replyToMessage(selectedText, textField);
                }
            }
        });

        startTimerButton.addActionListener(e -> startTimer(timeLabel));
        stopTimerButton.addActionListener(e -> stopTimer());
        resetTimerButton.addActionListener(e -> resetTimer(timeLabel));

        frame.setVisible(true);

        String name = JOptionPane.showInputDialog("Введите ваше имя:");
        connectToServer(name, textArea);
    }

    private static void connectToServer(String name, JTextArea textArea) {
        try {
            socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
            out = new PrintWriter(socket.getOutputStream(), true);
            out.println(name);

            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            String message;
            while ((message = in.readLine()) != null) {
                textArea.append(getCurrentTime() + " " + message + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void sendMessage(String message) {
        if (message != null && !message.trim().isEmpty()) {
            out.println(message);
        }
    }
    private static void startTimer(JLabel timeLabel) {
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                secondsElapsed++;
                timeLabel.setText(formatTime(secondsElapsed));
            }
        });
        timer.start();
    }

    private static void stopTimer() {
        if (timer != null) {
            timer.stop();
        }
    }

    private static void resetTimer(JLabel timeLabel) {
        if (timer != null) {
            timer.stop();
        }
        secondsElapsed = 0;
        timeLabel.setText("Время: 00:00:00");
    }

    private static String formatTime(int totalSeconds) {
        int hours = totalSeconds / 3600;
        int minutes = (totalSeconds % 3600) / 60;
        int seconds = totalSeconds % 60;
        return String.format("Время: %02d:%02d:%02d", hours, minutes, seconds);
    }

    private static String getCurrentTime() {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        return sdf.format(new Date());
    }

    // Метод для выделения текста и отправки сообщения в ответ на конкретное сообщение
    private static void replyToMessage(String originalMessage, JTextField textField) {
        // Предполагаем, что сообщение имеет формат "Имя: текст"
        String[] parts = originalMessage.split(":", 2); // Разделяем на имя и текст
        if (parts.length == 2) {
            String userName = parts[0].trim(); // Имя пользователя
            String messageText = parts[1].trim(); // Текст сообщения

            // Форматируем ответ
            String formattedReply = userName + ": (Ответ на: " + originalMessage + "), ";
            textField.setText(formattedReply); // Устанавливаем ответ в текстовое поле
            textField.requestFocus(); // Устанавливаем фокус на текстовое поле
        } else {
            // Если сообщение не соответствует ожидаемому формату, просто добавляем текст
            textField.setText("(Ответ на: " + originalMessage + "), ");
            textField.requestFocus();
        }
    }


    // Метод для блокировки пользователя
    private static void blockUser(String userName) {
        out.println("/block " + userName);
    }

    // Метод для разблокировки пользователя
    private static void unblockUser(String userName) {
        out.println("/unblock " + userName);
    }
}
