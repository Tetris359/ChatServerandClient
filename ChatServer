import java.io.*;
import java.net.*;
import java.util.*;

public class ChatServer {
    private static final int PORT = 12345;
    private static Set<ClientHandler> clientHandlers = new HashSet<>();

    public static void main(String[] args) {
        System.out.println("Chat server started...");
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                new ClientHandler(serverSocket.accept()).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static class ClientHandler extends Thread {
        private Socket socket;
        private PrintWriter out;
        private BufferedReader in;
        private String clientName;
        private Set<String> blockedUsers = new HashSet<>();

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try {
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);

                // Получаем имя клиента
                out.println("Введите ваше имя:");
                clientName = in.readLine();

                synchronized (clientHandlers) {
                    clientHandlers.add(this);
                }

                // Уведомляем всех клиентов о новом подключении
                broadcast(clientName + " присоединился к чату.", null);

                String message;
                while ((message = in.readLine()) != null) {
                    if (message.startsWith("/block ")) {
                        String userToBlock = message.split(" ")[1];
                        blockedUsers.add(userToBlock);
                        out.println("Вы заблокировали пользователя " + userToBlock);
                    } else if (message.startsWith("/unblock ")) {
                        String userToUnblock = message.split(" ")[1];
                        blockedUsers.remove(userToUnblock);
                        out.println("Вы разблокировали пользователя " + userToUnblock);
                    } else {
                        broadcast(clientName + ": " + message, blockedUsers);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                synchronized (clientHandlers) {
                    clientHandlers.remove(this);
                }
                // Уведомляем всех клиентов о выходе клиента
                broadcast(clientName + " вышел из чата.", null);
            }
        }

        private void broadcast(String message, Set<String> blockedUsers) {
            synchronized (clientHandlers) {
                for (ClientHandler handler : clientHandlers) {
                    if (!handler.blockedUsers.contains(clientName)) {
                        handler.out.println(message);
                    }
                }
            }
        }
    }
}
